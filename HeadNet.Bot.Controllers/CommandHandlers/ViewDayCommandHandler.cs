using System.Text;
using HeadNet.Bot.Controllers.CommandHandlers.Abstractions;
using HeadNet.Bot.Services.Abstractions;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace HeadNet.Bot.Controllers.CommandHandlers;

public class ViewDayCommandHandler : ICommandHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly IMoodService _moodService;
    private readonly ITaskService _taskService;

    public ViewDayCommandHandler(ITelegramBotClient botClient, IMoodService moodService, ITaskService taskService)
    {
        _botClient = botClient;
        _moodService = moodService;
        _taskService = taskService;
    }

    public async Task ExecuteAsync(Message message)
    {
        var chatId = message.Chat.Id;
        var mood = _moodService.GetMoodForToday(chatId);
        var moodText = mood != 0 ? $"*–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:* {mood}" : "*–í—ã –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è*";

        var tasks = _taskService.GetUserTasksMock(chatId); 
        var events = _taskService.GetUserEventsMock(chatId);

        var response = new StringBuilder();
        response.AppendLine(moodText);
        response.AppendLine("\n*–ó–ê–î–ê–ß–ò (–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ):*");
        foreach (var task in tasks)
        {
            response.AppendLine($"üìù {task}");
        }

        response.AppendLine("\n*–°–û–ë–´–¢–ò–Ø (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è):*");
        foreach (var ev in events)
        {
            response.AppendLine($"üóìÔ∏è {ev}");
        }

        await _botClient.SendTextMessageAsync(chatId, response.ToString(), parseMode: ParseMode.Markdown);
    }
}